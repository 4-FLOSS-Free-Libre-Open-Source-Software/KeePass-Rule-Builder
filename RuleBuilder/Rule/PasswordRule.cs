using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;

namespace RuleBuilder.Rule {
	public class PasswordRule : RuleProperty, IPasswordGenerator {
		public PasswordRule() {
			void changeDelegate() {
				this.NotifyRuleChanged();
			}
			this.Components.CollectionChanged += (object _, NotifyCollectionChangedEventArgs args) => {
				changeDelegate();
				if (args.OldItems != null) {
					foreach (object item in args.OldItems) {
						((Component)item).RuleChanged -= changeDelegate;
					}
				}
				if (args.NewItems != null) {
					foreach (object item in args.NewItems) {
						((Component)item).RuleChanged += changeDelegate;
					}
				}
			};
		}

		public PasswordRule(int length, IEnumerable<Component> components, string excludeCharacters): this() {
			this.Length = length;
			this.SetComponents(components);
			this.ExcludeCharacters = excludeCharacters;
		}

		private PasswordRule(PasswordRule other): this() {
			this.Length = other.Length;
			this.ExcludeCharacters = other.ExcludeCharacters;
			this.Components = new ObservableCollection<Component>(other.Components.Select((Component component) => component.Clone()));
		}

		private int _length = (int)KeePass.Program.Config.PasswordGenerator.AutoGeneratedPasswordsProfile.Length;
		public int Length {
			get => this._length;
			set {
				if (this._length != value) {
					this._length = value;
					this.NotifyPropertyChanged(nameof(this.Length));
				}
			}
		}

		private string _excludeCharacters = string.Empty;
		public string ExcludeCharacters {
			get => this._excludeCharacters;
			set {
				if (this._excludeCharacters != value) {
					this._excludeCharacters = value;
					this.NotifyPropertyChanged(nameof(this.ExcludeCharacters));
				}
			}
		}

		public ObservableCollection<Component> Components { get; } = new ObservableCollection<Component>();

		public void SetComponents(IEnumerable<Component> newComponents) {
			if (newComponents == null) {
				throw new ArgumentNullException(nameof(newComponents));
			}
			this.Components.Clear();
			foreach (Component component in newComponents) {
				this.Components.Add(component);
			}
		}

		public string NewPassword() {
			List<string> password = new List<string>();
			foreach (Component component in this.Components.Where((Component component) => component.Required)) {
				HashSet<string> chars = CharacterClass.SplitString(component.CharacterClass?.Characters ?? string.Empty);
				foreach (string c in CharacterClass.SplitString(this.ExcludeCharacters)) {
					_ = chars.Remove(c);
				}
				if (chars.Count > 0) {
					password.Add(Random.RandomItem(chars));
				}
			}
			this.FillToLength(password);
			Random.Shuffle(password);
			return string.Join(string.Empty, password);
		}

		private void FillToLength(List<string> password) {
			if (password.Count >= this.Length) {
				return;
			}
			HashSet<string> allCharacters = this.AllCharacters();
			if (allCharacters.Count > 0) {
				while (password.Count < this.Length) {
					password.Add(Random.RandomItem(allCharacters));
				}
			}
			return;
		}

		private HashSet<string> AllCharacters() {
			HashSet<string> chars = new HashSet<string>();
			List<Component> components = this.Components.Where((Component component) => component.CharacterClass != null).ToList();
			foreach (string charSet in components.Count > 0 ?
				components.Select((Component component) => component.CharacterClass?.Characters ?? string.Empty)
				: new List<string>() { CharacterClass.AllCharacters.Characters }) {
				chars.UnionWith(CharacterClass.SplitString(charSet));
			}
			foreach (string c in CharacterClass.SplitString(this.ExcludeCharacters)) {
				_ = chars.Remove(c);
			}
			return chars;
		}

		public PasswordRule Clone() => new PasswordRule(this);
	}
}
