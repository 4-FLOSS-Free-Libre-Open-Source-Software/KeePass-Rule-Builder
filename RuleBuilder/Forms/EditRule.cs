using KeePass.Resources;
using KeePass.Util;
using KeePassLib.Cryptography.PasswordGenerator;
using KeePassLib.Security;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace RuleBuilder.Forms {
	internal partial class EditRule : Form {
		public static Rule.IPasswordGenerator ShowRuleDialog(Rule.IPasswordGenerator generator) {
			EditRule dialog = new EditRule(generator);
			_ = dialog.ShowDialog();
			return dialog.SelectedGenerator;
		}
		private Rule.PasswordRule PasswordRule { get; set; } = new Rule.PasswordRule() {
			Length = 32
		};
		private List<PwProfile> Profiles { get; } = PwGeneratorUtil.GetAllProfiles(false);
		private Rule.IPasswordGenerator SelectedGenerator { get; set; }
		private bool Loaded { get; set; }
		private EditRule(Rule.IPasswordGenerator generator) {
			this.InitializeComponent();
			this.SelectedGenerator = generator;
			this.MinColIndex = this.dgvComponents.Columns.Add(new NumberColumn.NumberColumn() {
				HeaderText = "Minimum",
				SortMode = DataGridViewColumnSortMode.NotSortable
			});
			this.CharColIndex = this.dgvComponents.Columns[CharCol].Index;
			this.addButton = new DataGridViewButtonCell() {
				Value = "Add Character Set",
				ContextMenuStrip = this.mnuComponents
			};
			this.BuildMenu();
			int rowIndex = this.dgvComponents.Rows.Add();
			this.dgvComponents[this.CharColIndex, rowIndex] = this.addButton;
			this.dgvComponents[this.MinColIndex, rowIndex].ReadOnly = true;
			this.udPasswordLength.Select(this.udPasswordLength.Text.Length, 0);
			PwProfile defaultProfile = KeePass.Program.Config.PasswordGenerator.AutoGeneratedPasswordsProfile.CloneDeep();
			defaultProfile.Name = KPRes.AutoGeneratedPasswordSettings;
			this.Profiles.Insert(0, defaultProfile);
			this.lbProfiles.DataSource = this.Profiles;
			this.lbProfiles.DisplayMember = nameof(PwProfile.Name);
			this.LoadGenerator(generator);
			this.ShowPanel();
			this.Loaded = true;
			this.ShowExample();
		}
		private void BuildMenu() {
			for (int i = 0; i < NamedCharacterSets.Length; i++) {
				Rule.NamedCharacterSet charSet = NamedCharacterSets[i];
				ToolStripItem item = new ToolStripMenuItem(charSet.Name);
				item.Click += (object sender, EventArgs e) => this.AddCharacterSet(charSet);
				this.mnuComponents.Items.Insert(i, item);
			}
		}
		private void LoadGenerator(Rule.IPasswordGenerator generator) {
			if (generator == null) {
				this.rdoProfile.Checked = true;
				this.lbProfiles.SelectedIndex = 0;
			} else if (generator is Rule.PasswordRule) {
				this.rdoRule.Checked = true;
				Rule.PasswordRule rule = (Rule.PasswordRule)generator;
				this.PasswordRule = new Rule.PasswordRule() {
					Length = rule.Length
				};
				this.udPasswordLength.Value = rule.Length;
				List<char> exclChars = new List<char>(rule.Exclude);
				exclChars.Sort();
				this.txtExclude.Text = string.Join(string.Empty, exclChars);
				foreach (Rule.Component component in rule.Components) {
					this.AddComponent(component);
				}
			} else if (generator is Rule.PasswordProfile) {
				this.rdoProfile.Checked = true;
				string name = ((Rule.PasswordProfile)generator).Profile.Name;
				this.lbProfiles.SelectedIndex = 0;
				for (int i = 0; i < this.Profiles.Count; i++) {
					if (this.Profiles[i].Name == name) {
						this.lbProfiles.SelectedIndex = i;
						break;
					}
				}
			}
		}
		private Rule.IPasswordGenerator Generator() {
			if (this.rdoRule.Checked) {
				return this.PasswordRule;
			} else {
				return new Rule.PasswordProfile((PwProfile)this.lbProfiles.SelectedValue);
			}
		}
		private void ShowExample() {
			if (!this.Loaded) {
				return;
			}
			if (this.rdoRule.Checked) {
				this.txtExample.Text = this.PasswordRule.NewPassword();
			} else {
				_ = PwGenerator.Generate(out ProtectedString result, (PwProfile)this.lbProfiles.SelectedValue, null, KeePass.Program.PwGeneratorPool);
				this.txtExample.Text = result.ReadString();
			}
		}
		private void AddCharacterSet(Rule.NamedCharacterSet charSet) {
			this.AddComponent(new Rule.Component(charSet, 0));
			this.ShowExample();
		}
		private void AddCustom() {
			this.AddComponent(new Rule.Component(new Rule.NamedCharacterSet(), 0));
			this.ShowExample();
		}
		private void AddComponent(Rule.Component component) {
			int index = this.PasswordRule.Components.Count;
			this.PasswordRule.Components.Insert(index, component);
			if (component.CharacterSet.Enumeration == Rule.NamedCharacterSetEnum.Custom) {
				List<char> chars = new List<char>(component.CharacterSet.Characters);
				chars.Sort();
				DataGridViewTextBoxCell cell = new DataGridViewTextBoxCell() {
					Value = string.Join(string.Empty, chars),
					Style = new DataGridViewCellStyle() {
						Font = new Font("Consolas", this.Font.Size)
					}
				};
				this.dgvComponents.Rows.Insert(index);
				this.dgvComponents[this.CharColIndex, index] = cell;
				this.dgvComponents[this.MinColIndex, index].Value = component.MinCount;
				cell.ReadOnly = false;
				this.dgvComponents.CurrentCell = cell;
			} else {
				this.dgvComponents.Rows.Insert(index, new object[] { component.CharacterSet.Name });
				this.dgvComponents[this.CharColIndex, index].ReadOnly = true;
				this.dgvComponents[this.MinColIndex, index].Value = component.MinCount;
			}
		}
		private void OnLengthUpdate(object sender, EventArgs e) {
			this.PasswordRule.Length = (int)this.udPasswordLength.Value;
			this.ShowExample();
		}
		private void OnExcludeUpdate(object sender, EventArgs e) {
			this.PasswordRule.Exclude = new HashSet<char>(this.txtExclude.Text);
			this.ShowExample();
		}
		private void OnRefreshClick(object sender, EventArgs e) => this.ShowExample();
		private void OnCellClick(object sender, DataGridViewCellEventArgs e) {
			if (e.ColumnIndex < 0 || e.RowIndex < 0) {
				return;
			}
			DataGridView grid = sender as DataGridView;
			DataGridViewCell cell = grid[e.ColumnIndex, e.RowIndex];
			if (cell == this.addButton) {
				Rectangle rect = grid.GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, true);
				this.mnuComponents.Show(grid, new Point(rect.Left, rect.Bottom));
			}
		}
		private readonly DataGridViewButtonCell addButton;
		private readonly int CharColIndex;
		private readonly int MinColIndex;
		private const string CharCol = "Characters";
		private void AddCustom(object sender, EventArgs e) => this.AddCustom();
		private void OnCellValueChange(object sender, DataGridViewCellEventArgs e) {
			if (e.RowIndex < 0) {
				return;
			}
			DataGridView grid = sender as DataGridView;
			DataGridViewCell cell = grid[e.ColumnIndex, e.RowIndex];
			if (!cell.IsInEditMode) {
				return;
			}
			if (e.ColumnIndex == this.CharColIndex) {
				this.PasswordRule.Components[e.RowIndex].CharacterSet.Characters = new HashSet<char>((string)cell.Value);
			} else if (e.ColumnIndex == this.MinColIndex) {
				this.PasswordRule.Components[e.RowIndex].MinCount = (int)cell.Value;
			}
			this.ShowExample();
		}
		private void OnDirtyStateChange(object sender, EventArgs e) {
			DataGridView grid = sender as DataGridView;
			if (grid.IsCurrentCellDirty) {
				_ = grid.CommitEdit(DataGridViewDataErrorContexts.Commit);
			}
		}
		private void OnDeletingRow(object sender, DataGridViewRowCancelEventArgs e) {
			DataGridView grid = sender as DataGridView;
			if (e.Row.Index == grid.RowCount - 1) {
				e.Cancel = true;
			} else {
				this.PasswordRule.Components.RemoveAt(e.Row.Index);
				this.ShowExample();
			}
		}
		private void OnDeleteRowClick(object sender, EventArgs e) {
			int rowIndex = this.dgvComponents.SelectedRows[0].Index;
			this.dgvComponents.Rows.RemoveAt(rowIndex);
			this.PasswordRule.Components.RemoveAt(rowIndex);
			this.ShowExample();
		}
		private void OnSelectionChange(object sender, EventArgs e) {
			DataGridView grid = sender as DataGridView;
			this.btnDeleteRow.Enabled = grid.SelectedRows.Count > 0 && grid.SelectedRows[0].Index < grid.RowCount - 1;
		}
		private static readonly Rule.NamedCharacterSet[] NamedCharacterSets = new Rule.NamedCharacterSet[] {
			Rule.NamedCharacterSet.AllCharacters,
			Rule.NamedCharacterSet.Letters,
			Rule.NamedCharacterSet.Digits,
			Rule.NamedCharacterSet.Punctuation,
			Rule.NamedCharacterSet.UppercaseLetters,
			Rule.NamedCharacterSet.LowercaseLetters
		};

		private void RuleTypeSelected(object sender, EventArgs e) {
			this.ShowPanel();
		}

		private void ShowPanel() {
			pnlRule.Visible = rdoRule.Checked;
			pnlProfile.Visible = rdoProfile.Checked;
			this.ShowExample();
		}

		private void Save(object sender, EventArgs e) {
			this.SelectedGenerator = this.Generator();
		}
	}
}